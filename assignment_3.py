# -*- coding: utf-8 -*-
"""Assignment_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PGG5iVrnUFobKhpoi21AxvVBI7F9fqwP
"""

#1.Write a code to reverse a string

str="Hello world"
print(str[::-1]) #using string slicing

#2.Write a code to count the number of vowels in a string

str="Hello world"
vowels="aeiouAEIOU"
count=0
for i in str:
    if i in vowels:
        count+=1
print(count)

#3.Write a code to check if a given string is a palindrome or not

str=input("enter a string: ")
if str==str[::-1]:
    print("palindrome")
else:
    print("not palindrome")

#4.Write a code to check if two given strings are anagrams of each other

str1=input("enter a string: ")
str2=input("enter a string: ")
if sorted(str1)==sorted(str2):
    print("anagrams")
else:
    print("not anagrams")

#5.Write a code to find all occurrences of a given substring within another string

str="Hello world"
sub="l"
count=0
for i in str:
    if i==sub:
        count+=1
print(count)

# 6.Write a code to perform basic string compression using the counts of repeated characters

#7.Write a code to determine if a string has all unique characters

str1=(input("enter a string: "))
str2=set(str1)
if len(str1)==len(str2):
    print("unique")
else:
    print("not unique")

#8.Write a code to convert a given string to uppercase or lowercase

str1=(input("enter a string: "))
print("uppercase is : ",str1.upper())
print("lowercase is : ",str1.lower())

#9.Write a code to count the number of words in a string

str1=(input("enter a string: "))
print("number of words is : ",len(str1.split()))

#10.Write a code to concatenate two strings without using the + operator

str1=(input("enter a string: "))
str2=(input("enter a string: "))
Concatenated_str=f"{str1} {str2}"
print(Concatenated_str)

#11.Write a code to remove all occurrences of a specific element from a list

my_list = [1, 2, 3, 2, 4, 2, 5]
my_list = [x for x in my_list if x != 2]  # Removes all occurrences of 2
print(my_list)

#12.Implement a code to find the second largest number in a given list of integers

my_list = list(input("enter a list of integers: "))
my_list.sort()
print("second largest number is :",my_list[-2])

#13.'''create a code to count the occurrences of each element in a list
and return a dictionary with elements as
keys and their counts as values'''

#14. Write a code to reverse a list in-place without using any built-in reverse functions
my_list=list(input("enter a list: "))

print(my_list[::-1])

'''15.Implement a code to find and remove duplicates from a list while preserving the original order of
elements'''

def remove_duplicate(input_list):
    duplicate=set()
    new_list=[]
    for i in input_list:
        if i not in duplicate:
            new_list.append(i)
            duplicate.add(i)
    return(new_list)

input_list=[1,4,6,5,2,7,9,3,0,2,0]
print(remove_duplicate(input_list))

'''16. Create a code to check if a given list is sorted (either in ascending or
 descending order) or not'''

def is_sorted(input_list):

    ascending_sorted = sorted(input_list)
    descending_sorted = sorted(input_list, reverse=True)


    if input_list == ascending_sorted or input_list ==descending_sorted :
        return "The list is sorted ."

    else:
        return "The list is not sorted."


input_list1 = [5,4,3]
print(is_sorted(input_list1))

#17.Write a code to merge two sorted lists into a single sorted list
list1=[1,2,3,4,5]
list2=[6,7,8,9,10]
list3=list1+list2
list3.sort()
print(list3)

#18.Implement a code to find the intersection of two given lists

list1=[1,2,3,4,5]
list2=[3,4,6,7,1]
list3=list(set(list1) & set(list2))
print(list3)

#19.Create a code to find the union of two lists without duplicates
list1=[1,2,3,4,5]
list2=[3,4,6,7,1]
list3=list(set(list1)| set(list2))
print(list3)

#20.Write a code to shuffle a given list randomly without using any built-in shuffle functions
def shuffle_list(input_list):
    n = len(input_list)

    for i in range(n):
        random_index = (i  + 8) % n
        input_list[i], input_list[random_index] = input_list[random_index], input_list[i]

    return input_list


my_list = [1, 2, 3, 4, 5]
shuffled_list = shuffle_list(my_list.copy())
print("Original List:", my_list)
print("Shuffled List:", shuffled_list)

'''21.Write a code that takes two tuples as input and returns a new tuple containing elements that are
common to both input tuples'''

tuple1=(1,2,3,4,5)
tuple2=(4,5,6,7,8)
tuple3=tuple(set(tuple1) & set(tuple2))
print(tuple3)

'''22.Create a code that prompts the user to enter two sets of integers separated by commas. Then, print the
intersection of these two sets'''

set1=set(input("enter a set of integers: "))
set2=set(input("enter a set of integers: "))
set3=set1.intersection(set2)
print(set3)

'''23. Write a code to concatenate two tuples. The function should take two tuples as input and return a new
tuple containing elements from both input tuples.'''

tuple1=(1,2,3,4,5)
tuple2=(6,7,8,4,5)
tuple3=tuple1+tuple2
print(tuple3)

'''24.Develop a code that prompts the user to input two sets of strings. Then, print the elements that are
present in the first set but not in the second set'''

set1 = set(input("Enter the first set of strings (separate by space): "))
set2 = set(input("Enter the second set of strings (separate by space): "))
difference = set1 - set2
print("Elements present in the first set but not in the second set:", difference)

'''25.Create a code that takes a tuple and two integers as input. The function should return a new tuple
containing elements from the original tuple within the specified range of indices.'''

def slice_tuple(input_tuple, start_index, end_index):
    return input_tuple[start_index:end_index]

input_tuple = tuple(input("Enter the elements of the tuple separated by space: ").split())
start_index = int(input("Enter the start index: "))
end_index = int(input("Enter the end index: "))
sliced_tuple = slice_tuple(input_tuple, start_index, end_index)
print("Sliced Tuple:", sliced_tuple)

'''26.Write a code that prompts the user to input two sets of characters.
Then, print the union of these two sets'''

set1 = set(input("Enter the first set of characters : "))
set2 = set(input("Enter the second set of characters ): "))
print("Union of the two sets:", set1|set2)

'''27.Develop a code that takes a tuple of integers as input.
 The function should return the maximum and
minimum values from the tuple using tuple unpacking'''

def find_min_max(input_tuple):
  min_value=min(input_tuple)
  max_value=max(input_tuple)
  return min_value,max_value
input_tuple=(1,2,3,4,5)
print(find_min_max((input_tuple)))

'''28.Create a code that defines two sets of integers. Then, print the union,
 intersection, and difference of these two sets'''
s1={1,2,3,5,7,8}
s2={3,5,6,7,9}
print(f"union is {s1|s2},intersection is {s1&s2},difference is {s1-s2}")

'''29.write a code that takes a tuple and an element as input. The function should return the count of
occurrences of the given element in the tuple'''

def no_occourance(input_tuple,element):
    count=input_tuple.count(element)
    return(count)
input_tuple=tuple(input("enter a tuple: "))
element=input("enter a element: ")
print(no_occourance(input_tuple,element))

'''30.Develop a code that prompts the user to input two sets of strings. Then, print the symmetric difference of
these two sets'''

set1 = set(input("Enter the first set of strings (separate by space): "))
set2 = set(input("Enter the second set of strings (separate by space): "))
difference = set1 ^ set2
print("Symmetric difference of the two sets:", difference)

'''31.Write a code that takes a list of words as input and returns a dictionary where the keys are unique words
and the values are the frequencies of those words in the input list'''

wordlist=input("enter the keys: ").split()
wordfreq=[wordlist.count(i) for i in wordlist]
print(dict(zip(wordlist,wordfreq)))

'''32.Write a code that takes two dictionaries as input and merges them into a single dictionary. If there are
common keys, the values should be added together'''
dict1 = {'a': 12, 'for': 25, 'c': 9}
dict2 = {'sujan': 100, 'akui': 200, 'for': 300}
c = {i: dict1.get(i, 0) + dict2.get(i, 0)
     for i in set(dict1).union(dict2)}
print(c)

'''33.Write a code to access a value in a nested dictionary. The function should take the dictionary and a list of
keys as input, and return the corresponding value. If any of the keys do not exist in the dictionary, the
function should return None'''

def access_nested_value(nested_dict, keys):
    current_value = nested_dict

    for key in keys:
        if key in current_value:
            current_value = current_value[key]
        else:
            return None

    return current_value

nested_dict = {'a': {'b': {'c':42}}}

keys = input("Enter the keys to access (separated by spaces): ").split()
result = access_nested_value(nested_dict, keys)
print("Result:", result)

'''34.Write a code that takes a dictionary as input and returns a sorted version of it based on the values. You
can choose whether to sort in ascending or descending order'''
my_dict = {'a': 3,
        'b': 9,
        'c': 6,
        'd': 2}
sorted_dict = sorted([(value, key)
for (key, value) in my_dict.items()])
print("Sorted dictionary is :")
print(sorted_dict)

'''35.Write a code that inverts a dictionary, swapping keys and values. Ensure that the inverted dictionary
correctly handles cases where multiple keys have the same value by storing the keys as a list in the
inverted dictionary'''
old_dict = {1: 'a', 2: 'b', 3: 'c', 4: 'd'}
new_dict = {v:k for k,v in old_dict.items()}
print(new_dict)